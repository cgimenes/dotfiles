(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%" :y "0%" :anchor "left center")
  :reserve (struts :side "left" :distance "4%")
  :exclusive true
  (centerbox :orientation "v"
    (start)
    (center)
    (end)))

(defwidget start []
  (box :orientation "v" :space-evenly false :class "start-modules"
    (workspaces)))

(defwidget center []
  (box :orientation "v" :space-evenly false :class "center-modules"
    (sink)
    (music)))

(defwidget end []
  (box :orientation "v" :space-evenly false :class "end-modules" :spacing 10
    ;(metric :label "Backlight"
            ;:value backlight
            ;:onchange "xbacklight -set {}")
    ;(metric :label "RAM"
            ;:value {EWW_RAM.used_mem_perc}
            ;:onchange "")
    ;(metric :label "CPU"
            ;:value {EWW_CPU.avg}
            ;:onchange "")
    (iconed-value :class "volume" :icon "" :value volume)
    (iconed-value :class "battery" :icon "" :value battery)
    ;(systray :orientation "v" :prepend-new true :icon-size 20)
    (iconed-value :class "date" :icon "" :value date)
    (iconed-value :class "time" :icon "" :value time)
    ))

(defwidget iconed-value [class icon value]
  (box :orientation "v" :space-evenly false :class "iconed-value ${class}"
    (icon :icon icon)
    (label :text value :show-truncated false)))

(defwidget icon [icon]
  (label :class "icon" :text icon :show-truncated false))

(deflisten workspaces :initial "[]" "scripts/workspaces.sh")
(defwidget workspaces []
  (box :class "workspaces"
       :orientation "v"
       :spacing 10
    (for workspace in workspaces
      (eventbox :onclick "scripts/focus-workspace.sh ${workspace.id}"
        (box :class "workspace-entry"
          (label :text "${workspace.name}" :class "${workspace.state}"))))))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defwidget music []
  (button :onclick "playerctl play-pause"
          :onmiddleclick "playerctl previous"
          :onrightclick "playerctl next"
    {music}))

(defpoll sink :interval "10s"
  "scripts/aliks get")
(defwidget sink []
  (button :onclick "scripts/aliks toggle"
          :onmiddleclick "scripts/aliks reset"
          :onrightclick "scripts/aliks toggle --reverse"
    {sink}))

(defpoll date :interval "60s"
  "date '+%a\\n%d'")

(defpoll time :interval "10s"
  "date '+%H\\n%M'")

(defpoll battery :interval "30s"
  "cat /sys/class/power_supply/BAT?/capacity")

(defpoll volume :interval "1s" "pactl get-sink-volume @DEFAULT_SINK@ | head -n 1| awk '{print substr($5, 1, length($5)-1)}'")

(defpoll backlight :interval "1s"
  "xbacklight -get")
