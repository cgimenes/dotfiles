(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "24px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))

(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (center)
    (right)))

(defwidget left []
  (box :orientation "h" :space-evenly false :spacing 10 :halign "start" :class "left_modules"
    (workspaces)
    (sink)))

(defwidget center []
  (box :orientation "h" :space-evenly false :spacing 10 :halign "center" :class "center_modules"
    (music)))

(defwidget right []
  (box :orientation "h" :space-evenly false :spacing 10 :halign "end" :class "right_modules"
    (metric :label "Backlight"
            :value backlight
            :onchange "xbacklight -set {}")
    (metric :label "Volume"
            :value volume
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
    (metric :label "RAM"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "Disk"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (metric :label "Battery"
            :value battery
            :onchange "")
    (metric :label "CPU"
            :value {EWW_CPU.avg}
            :onchange "")
    (systray :prepend-new true :icon-size 20)
    time))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten workspaces :initial "[]" "scripts/workspaces.sh")
(defwidget workspaces []
  (box :class "workspaces"
       :halign "center"
       :valign "center"
       :vexpand true
       :hexpand true
    (for workspace in workspaces
      (eventbox :onclick "scripts/focus-workspace.sh ${workspace.id}"
        (box :class "workspace-entry"
          (label :text "${workspace.name}" :class "${workspace.state}"))))))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defwidget music []
  (button :onclick "playerctl play-pause"
          :onmiddleclick "playerctl previous"
          :onrightclick "playerctl next"
    {music}))

(deflisten sink "scripts/aliks get")
(defwidget sink []
  (button :onclick "scripts/aliks toggle"
          :onmiddleclick "scripts/aliks reset"
          :onrightclick "scripts/aliks toggle --reverse"
    {sink}))

(defpoll volume :interval "1s" "pactl get-sink-volume @DEFAULT_SINK@ | head -n 1| awk '{print substr($5, 1, length($5)-1)}'")

(defpoll time :interval "10s"
  "date '+%Y-%m-%d %H:%M'")

(defpoll battery :interval "30s"
  "cat /sys/class/power_supply/BAT?/capacity")

(defpoll backlight :interval "1s"
  "xbacklight -get")
