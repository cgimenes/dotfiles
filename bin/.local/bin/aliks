#!/usr/bin/env ruby

require 'thor'
require 'json'
require 'singleton'

class PipeWireProvider
  include Singleton

  def default_sink
    @default_sink ||= `pactl get-default-sink`.strip
  end

  def list_sinks
    @list_sinks ||= JSON.parse(`pactl --format=json list sinks`)
  end

  def set_default_sink(sink)
    `pactl set-default-sink "#{sink}"`
  end

  def unmute_all_sink_input
    indexes = list_sink_inputs.map { |si| si['index'] }
    indexes.each do |idx|
      `pactl set-sink-input-mute #{idx} false`
      `pactl set-sink-input-volume #{idx} 0x10000`
    end
  end

  def move_all_sink_input(sink)
    indexes = list_sink_inputs.map { |si| si['index'] }
    indexes.each do |idx|
      `pactl move-sink-input #{idx} #{sink}`
    end
  end

  def list_sink_inputs
    @list_sink_inputs ||= JSON.parse(`pactl --format=json list sink-inputs`)
  end
end

class Aliks < Thor
  include Thor::Actions

  def initialize(args = [], local_options = {}, config = {})
    super
    @config_path = File.expand_path('~/.config/aliks.json')
    File.open(@config_path, 'r') { |file| @aliases = JSON.parse(file.read)['aliases'] } if File.exist? @config_path
    @provider = PipeWireProvider.instance
  end

  desc 'get', 'Prints the default sink alias'
  def get
    sink = @provider.list_sinks.detect { |s| s['name'] == @provider.default_sink }
    port = if sink['ports'].size > 1
      ': ' + sink['ports'].detect { |p| p['name'] === sink['active_port'] }['description']
    else
      ''
    end
    puts sink['properties']['device.description'] + port
  end

  desc 'list', 'List alias of available sinks'
  def list
    @provider.list_sinks
             .map { |s| s['name'] }
             .map { |s| @aliases[s] || s }
             .each { |s| puts "#{s == @aliases[@provider.default_sink] ? '* ' : ''}#{s}" }
  end

  desc 'set', 'Set the default sink by alias'
  def set(sink)
    sinks = @provider.list_sinks
                     .map { |s| s['name'] }
                     .map { |s| [@aliases[s] || s, s] }
                     .to_h
    sink_name = sinks.detect { |k, _| k == sink }[1]

    @provider.set_default_sink(sink_name)
    @provider.move_all_sink_input(sink_name)
    @provider.unmute_all_sink_input
  end

  desc 'setup', 'Creates the configuration file (~/.config/aliks.json) with available sinks'
  def setup
    if File.exist? @config_path
      puts 'Configuration file already exists'
      return
    end

    aliases = @provider.list_sinks.map { |s| [s['description'], s['name']] }.to_h

    config = { aliases: aliases }
    File.open(@config_path, 'wb') do |file|
      file.write(JSON.pretty_generate(config))
    end
  end

  desc 'toggle', 'Toggle between available sinks'
  method_options reverse: :boolean
  def toggle
    order = options.reverse? ? -1 : 1
    current_index = @provider.list_sinks.index { |s| s['name'] == @provider.default_sink } || 0
    next_index = current_index + order
    count = @provider.list_sinks.count
    unless next_index.between?(0, count - 1)
      next_index = options.reverse? ? count - 1 : 0
    end
    next_sink = @provider.list_sinks[next_index]['name']

    @provider.set_default_sink(next_sink)
    @provider.move_all_sink_input(next_sink)
    @provider.unmute_all_sink_input
  end

  desc 'reset', 'Reset default sink'
  def reset
    @provider.set_default_sink(@provider.default_sink)
    @provider.move_all_sink_input(@provider.default_sink)
    @provider.unmute_all_sink_input
  end
end

Aliks.start
