#!/bin/sh

CONFIG_PATH="$HOME/.config/aliks.json"
DEFAULT_SINK=$(pactl get-default-sink)
SINKS_JSON=$(pactl --format=json list sinks)
SINK_INPUTS_JSON=$(pactl --format=json list sink-inputs)

# Utility function to get the default sink name
get_default_sink() {
  echo "$DEFAULT_SINK"
}

# Utility function to list all sinks
list_sinks() {
  echo "$SINKS_JSON" | jq -r '.[].name'
}

# Utility function to list sink inputs
list_sink_inputs() {
  echo "$SINK_INPUTS_JSON"
}

# Get the alias name from the config file for a sink
get_alias_for_sink() {
  local sink_name="$1"
  jq -r ".aliases[\"$sink_name\"] // \"$sink_name\"" < "$CONFIG_PATH"
}

# Set the default sink by its name
set_default_sink() {
  local sink_name="$1"
  pactl set-default-sink "$sink_name"
}

# Move all sink inputs to a specific sink
move_all_sink_input() {
  local sink_name="$1"
  local indexes=$(echo "$SINK_INPUTS_JSON" | jq -r '.[].index')
  for idx in $indexes; do
    pactl move-sink-input "$idx" "$sink_name"
    done
}

# Unmute all sink inputs
unmute_all_sink_input() {
  local indexes=$(echo "$SINK_INPUTS_JSON" | jq -r '.[].index')
  for idx in $indexes; do
    pactl set-sink-input-mute "$idx" false
    pactl set-sink-input-volume "$idx" 0x10000
    done
}

# Get the description of the default sink
get_description() {
  local default_sink=$(get_default_sink)
  local sink_info=$(echo "$SINKS_JSON" | jq -r ".[] | select(.name == \"$default_sink\")")
  local description=$(echo "$sink_info" | jq -r '.properties["device.description"]')

  local active_port=$(echo "$sink_info" | jq -r '.active_port // ""')
  local ports=$(echo "$sink_info" | jq -r '.ports')

  if [ "$(echo "$ports" | jq length)" -gt 1 ]; then
    local port_desc=$(echo "$ports" | jq -r ".[] | select(.name == \"$active_port\") | .description")
    echo "$description: $port_desc"
  else
    echo "$description"
    fi
}

# List available sinks with aliases
list_sinks_with_aliases() {
  local sinks=$(list_sinks)
  while read -r sink; do
    local alias=$(get_alias_for_sink "$sink")
    local prefix=""
    if [ "$sink" == "$DEFAULT_SINK" ]; then
      prefix="* "
      fi
      echo "$prefix$alias"
      done <<< "$sinks"
}

# Toggle between sinks
toggle_sink() {
  local order="$1"
  local current_index=$(echo "$SINKS_JSON" | jq -r ".[] | select(.name == \"$DEFAULT_SINK\") | .index")
  local count=$(echo "$SINKS_JSON" | jq length)
  local next_index=$((current_index + order))

  if [ "$next_index" -lt 0 ]; then
    next_index=$((count - 1))
    elif [ "$next_index" -ge "$count" ]; then
    next_index=0
    fi

    local next_sink=$(echo "$SINKS_JSON" | jq -r ".[$next_index].name")
    set_default_sink "$next_sink"
    move_all_sink_input "$next_sink"
    unmute_all_sink_input
}

# Reset the default sink to the original one
reset_sink() {
  set_default_sink "$DEFAULT_SINK"
  move_all_sink_input "$DEFAULT_SINK"
  unmute_all_sink_input
}

# Setup the configuration file
setup_config() {
  if [ -f "$CONFIG_PATH" ]; then
    echo "Configuration file already exists."
    return
    fi

    local aliases=$(echo "$SINKS_JSON" | jq -r '[.[] | {(.properties["device.description"]): .name}] | add')
    echo "{\"aliases\": $aliases}" > "$CONFIG_PATH"
}

# Main entry point for the script
case "$1" in
  "get")
  get_description
  ;;
  "list")
  list_sinks_with_aliases
  ;;
  "set")
  if [ -z "$2" ]; then
    echo "Please provide a sink name."
    exit 1
    fi
    set_default_sink "$2"
    move_all_sink_input "$2"
    unmute_all_sink_input
    ;;
    "toggle")
    toggle_sink 1
    ;;
    "toggle_reverse")
    toggle_sink -1
    ;;
    "reset")
    reset_sink
    ;;
    "setup")
    setup_config
    ;;
    *)
    echo "Usage: $0 {get|list|set|toggle|toggle_reverse|reset|setup}"
    exit 1
    ;;
    esac
