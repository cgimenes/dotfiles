#!/usr/bin/env python

import subprocess
import json
import os
import argparse

class PipeWireProvider:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def default_sink(self):
        if not hasattr(self, '_default_sink'):
            self._default_sink = subprocess.getoutput('pactl get-default-sink').strip()
        return self._default_sink

    def list_sinks(self):
        if not hasattr(self, '_list_sinks'):
            self._list_sinks = json.loads(subprocess.getoutput('pactl --format=json list sinks'))
        return self._list_sinks

    def set_default_sink(self, sink):
        subprocess.run(['pactl', 'set-default-sink', sink])

    def unmute_all_sink_input(self):
        for si in self.list_sink_inputs():
            idx = si['index']
            subprocess.run(['pactl', 'set-sink-input-mute', str(idx), 'false'])
            subprocess.run(['pactl', 'set-sink-input-volume', str(idx), '0x10000'])

    def move_all_sink_input(self, sink):
        for si in self.list_sink_inputs():
            idx = si['index']
            subprocess.run(['pactl', 'move-sink-input', str(idx), sink])

    def list_sink_inputs(self):
        if not hasattr(self, '_list_sink_inputs'):
            self._list_sink_inputs = json.loads(subprocess.getoutput('pactl --format=json list sink-inputs'))
        return self._list_sink_inputs


class Aliks:
    def __init__(self):
        self._config_path = os.path.expanduser('~/.config/aliks.json')
        if os.path.exists(self._config_path):
            with open(self._config_path, 'r') as file:
                self._aliases = json.load(file)['aliases']
        else:
            self._aliases = {}
        self._provider = PipeWireProvider()

    def get(self):
        if self._provider.default_sink() in self._aliases:
            print(self._aliases[self._provider.default_sink()])
            return

        sink = next(s for s in self._provider.list_sinks() if s['name'] == self._provider.default_sink())
        port = ''
        if len(sink['ports']) > 1:
            port = ': ' + next(p['description'] for p in sink['ports'] if p['name'] == sink['active_port'])
        print(sink['properties']['device.description'] + port)

    def list(self, print_json=False):
        if print_json:
            print(json.dumps([self._aliases.get(sink['name'], sink['name']) for sink in self._provider.list_sinks()]))
            return
        for sink in self._provider.list_sinks():
            sink_name = sink['name']
            alias = self._aliases.get(sink_name, sink_name)
            print(f"* {alias}" if alias == self._aliases.get(self._provider.default_sink(), '') else alias)

    def set(self, sink):
        sinks = {self._aliases.get(s['name'], s['name']): s['name'] for s in self._provider.list_sinks()}
        sink_name = sinks.get(sink)
        if sink_name:
            self._provider.set_default_sink(sink_name)
            self._provider.move_all_sink_input(sink_name)
            self._provider.unmute_all_sink_input()

    def setup(self):
        if os.path.exists(self._config_path):
            print('Configuration file already exists')
            return
        aliases = {s['description']: s['name'] for s in self._provider.list_sinks()}
        config = {'aliases': aliases}
        with open(self._config_path, 'w') as file:
            json.dump(config, file, indent=4)

    def toggle(self, reverse=False):
        sinks = self._provider.list_sinks()
        current_index = next((i for i, s in enumerate(sinks) if s['name'] == self._provider.default_sink()), 0)
        order = -1 if reverse else 1
        next_index = current_index + order
        count = len(sinks)
        if not (0 <= next_index < count):
            next_index = count - 1 if reverse else 0
        next_sink = sinks[next_index]['name']
        self._provider.set_default_sink(next_sink)
        self._provider.move_all_sink_input(next_sink)
        self._provider.unmute_all_sink_input()

    def reset(self):
        self._provider.set_default_sink(self._provider.default_sink())
        self._provider.move_all_sink_input(self._provider.default_sink())
        self._provider.unmute_all_sink_input()


def main():
    parser = argparse.ArgumentParser(description="Aliks: Manage PipeWire sinks")
    subparsers = parser.add_subparsers(dest="command")

    # 'get' command
    subparsers.add_parser('get', help="Prints the default sink alias")

    # 'list' command
    list_parser = subparsers.add_parser('list', help="List alias of available sinks")
    list_parser.add_argument('--json', action='store_true', help="List sinks in JSON format")

    # 'set' command
    set_parser = subparsers.add_parser('set', help="Set the default sink by alias")
    set_parser.add_argument('sink', help="The sink alias to set")

    # 'setup' command
    subparsers.add_parser('setup', help="Creates the configuration file (~/.config/aliks.json) with available sinks")

    # 'toggle' command
    toggle_parser = subparsers.add_parser('toggle', help="Toggle between available sinks")
    toggle_parser.add_argument('--reverse', action='store_true', help="Reverse the toggle order")

    # 'reset' command
    subparsers.add_parser('reset', help="Reset default sink")

    args = parser.parse_args()

    aliks = Aliks()

    if args.command == 'get':
        aliks.get()
    elif args.command == 'list':
        aliks.list(print_json=args.json)
    elif args.command == 'set':
        aliks.set(args.sink)
    elif args.command == 'setup':
        aliks.setup()
    elif args.command == 'toggle':
        aliks.toggle(reverse=args.reverse)
    elif args.command == 'reset':
        aliks.reset()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()

